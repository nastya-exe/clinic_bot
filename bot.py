import asyncio


from aiogram.filters import Command, BaseFilter, CommandStart
from aiogram import Dispatcher, types, Bot, F
from aiogram.types import TelegramObject, Message, BotCommand, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db.models import Clinics, Doctors, DoctorSchedule


from db.db_session import async_session_maker

dp = Dispatcher()

async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–í –Ω–∞—á–∞–ª–æ"),
        BotCommand(command="appointment", description="–ó–∞–ø–∏—Å—å –∫–æ –≤—Ä–∞—á—É"),
        BotCommand(command="my_appointments", description="–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
    ]
    await bot.set_my_commands(commands)

@dp.message(Command('start'))
async def cmd_start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë©‚Äç‚öï –ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É", callback_data="appointment"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")
        ]
    ])
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∫–ª–∏–Ω–∏–∫–∞ –ú–µ–¥–ö–ª–∏–Ω–∏–∫.\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.",
        reply_markup=keyboard
    )





# .............................................../appointment.........................................................................................................

class AppointmentStates(StatesGroup):
    choosing_specialization = State()
    choosing_clinic = State()
    choosing_mode = State()
    choosing_doctor = State()
    choosing_time = State()
    confirming_appointment = State()

async def show_specialists(target, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="spec_therapist"),
            InlineKeyboardButton(text="–ì–∏–Ω–µ–∫–æ–ª–æ–≥", callback_data="spec_gynecologist"),
            InlineKeyboardButton(text="–•–∏—Ä—É—Ä–≥", callback_data="spec_surgeon")
        ],
        [
            InlineKeyboardButton(text="–£—Ä–æ–ª–æ–≥", callback_data="spec_urologist"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_back_to_start")
        ]
    ])

    if isinstance(target, Message):
        await target.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=keyboard)
    elif isinstance(target, CallbackQuery):
        await target.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:", reply_markup=keyboard)


@dp.callback_query(F.data == "appointment")
async def handle_appointment_callback(callback: CallbackQuery, state: FSMContext):
    await show_specialists(callback, state)


@dp.message(Command("appointment"))
async def handle_appointment_command(message: Message, state: FSMContext):
    await show_specialists(message, state)

@dp.callback_query(F.data == "go_back_to_start")
async def go_back_to_start_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë©‚Äç‚öï –ó–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É", callback_data="appointment"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")
        ]
    ])
    await callback.message.edit_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∫–ª–∏–Ω–∏–∫–∞ –ú–µ–¥–ö–ª–∏–Ω–∏–∫.\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.",
        reply_markup=keyboard
    )
    await callback.answer()

SPECIALIZATIONS = {
    "spec_therapist": "–¢–µ—Ä–∞–ø–µ–≤—Ç",
    "spec_gynecologist": "–ì–∏–Ω–µ–∫–æ–ª–æ–≥",
    "spec_surgeon": "–•–∏—Ä—É—Ä–≥",
    "spec_urologist": "–£—Ä–æ–ª–æ–≥",
}

@dp.callback_query(F.data.startswith("spec_"))
async def handle_specialist_selection(callback: CallbackQuery, state: FSMContext):
    specialist_code = callback.data
    specialization = SPECIALIZATIONS.get(specialist_code)

    if not specialization:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", show_alert=True)
        return

    await state.update_data(chosen_specialization=specialization)

    async with async_session_maker() as session:
        stmt = (
            select(Clinics)
            .join(Doctors)
            .where(
                Doctors.specialization == specialization,
                Doctors.is_active == True
            )
            .options(selectinload(Clinics.doctors))
        )
        result = await session.execute(stmt)
        clinics = result.scalars().unique().all()

    if not clinics:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=clinic.adress or "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞", callback_data=f"clinic_{clinic.id}")]
            for clinic in clinics
        ] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="appointment")]]
    )

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {specialization}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –í–∞—Å –∫–ª–∏–Ω–∏–∫—É:",
        reply_markup=keyboard
    )




@dp.callback_query(F.data.startswith("clinic_"))
async def clinic_chosen_handler(callback: CallbackQuery, state: FSMContext):
    clinic_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    specialization_raw = data.get("chosen_specialization", "")
    specialization = specialization_raw.replace("spec_", "")

    await state.update_data(chosen_clinic=clinic_id, chosen_specialization=specialization)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞", callback_data="choose_doctor"),
            InlineKeyboardButton(text="‚è± –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", callback_data="nearest_slot")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back_to_clinics")
        ]
    ])
    await callback.message.edit_text("–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await state.set_state(AppointmentStates.choosing_mode)

@dp.callback_query(F.data == "go_back_to_clinics")
async def go_back_to_clinics_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    specialization = data.get("chosen_specialization")

    if not specialization:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        await state.set_state(AppointmentStates.choosing_specialization)
        await callback.answer()
        return

    async with async_session_maker() as session:
        stmt = (
            select(Clinics)
            .join(Doctors)
            .where(
                Doctors.specialization == specialization,
                Doctors.is_active == True
            )
            .options(selectinload(Clinics.doctors))
        )
        result = await session.execute(stmt)
        clinics = result.scalars().unique().all()

    if not clinics:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.")
        await callback.answer()
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=clinic.adress or "–ë–µ–∑ –∞–¥—Ä–µ—Å–∞", callback_data=f"clinic_{clinic.id}")]
            for clinic in clinics
        ] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="go_back_to_specialists")]]
    )

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {specialization}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –í–∞—Å –∫–ª–∏–Ω–∏–∫—É:",
        reply_markup=keyboard
    )
    await state.set_state(AppointmentStates.choosing_clinic)
    await callback.answer()


@dp.callback_query(F.data == "nearest_slot")
async def nearest_slot_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞...")
    await state.set_state(AppointmentStates.choosing_time)

@dp.callback_query(F.data == "go_back_to_clinics")
async def go_back_to_clinics_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–ª–∏–Ω–∏–∫–∏...")
    await state.set_state(AppointmentStates.choosing_clinic)


@dp.callback_query(F.data == "choose_doctor")
async def choose_doctor_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    clinic_id = data.get("chosen_clinic")
    specialization = data.get("chosen_specialization")

    if not clinic_id or not specialization:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∫–ª–∏–Ω–∏–∫–∞ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.")
        return

    async with async_session_maker() as session:
        result = await session.execute(
            select(Doctors)
            .where(
                Doctors.clinic_id == clinic_id,
                Doctors.specialization == specialization,
                Doctors.is_active == True
            )
        )
        doctors = result.scalars().all()

    if not doctors:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —ç—Ç–æ–π –∫–ª–∏–Ω–∏–∫–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardBuilder()
    for doctor in doctors:
        keyboard.button(
            text=f"{doctor.full_name}",
            callback_data=f"doctor_{doctor.id}"
        )
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back_to_mode")
    keyboard.adjust(1)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(AppointmentStates.choosing_doctor)

@dp.callback_query(F.data == "go_back_to_mode")
async def go_back_to_mode_handler(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞", callback_data="choose_doctor"),
            InlineKeyboardButton(text="‚è± –ë–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", callback_data="nearest_slot")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back_to_clinics")
        ]
    ])
    await callback.message.edit_text("–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", reply_markup=keyboard)
    await state.set_state(AppointmentStates.choosing_mode)


@dp.callback_query(F.data.startswith("doctor_"))
async def doctor_chosen_handler(callback: CallbackQuery, state: FSMContext):
    doctor_id = int(callback.data.split("_")[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤—Ä–∞—á–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(chosen_doctor=doctor_id)

    webapp_url = f"https://example.com//?doctor_id={doctor_id}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞", web_app=WebAppInfo(url=webapp_url))],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_doctor")]
    ])

    await callback.message.edit_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è:",
        reply_markup=keyboard
    )
    await state.set_state(AppointmentStates.waiting_for_webapp)











async def main():
    bot = Bot(token='8104912382:AAE8sSIApQyDGthH_faw3vsJxHZV0OD_TA8')
    await set_commands(bot)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())